#!/usr/bin/bash

USER_NAME=Bnyro
VOID_DIR=~/Projects/void-packages

prep_pkgs() {
	if [ ! -d "$VOID_DIR" ]; then
		git clone "git@github.com:$USER_NAME/void-packages" "$VOID_DIR"
		cd "$VOID_DIR"
		git remote add upstream "https://github.com/void-linux/void-packages.git"
		git fetch upstream
		git reset --hard upstream/master
		git push
		./xbps-src binary-bootstrap
		./xbps-src clean
	else
		cd "$VOID_DIR"
	fi
}
pkg_install() { # package name
	./xbps-src pkg "$1" || exit 1
	xi -y "$1"
}

build() { # package/branch name, (optional) github user name of fork, e.g. Bnyro
	prep_pkgs
	if [ "$2" ]; then
		git remote add "$2" "https://github.com/$2/void-packages.git"
		git fetch "$2"
		git checkout "$2"/"$1"
		git merge upstream/master --no-edit
	else
		git checkout "$1"
	fi
	pkg_install "$1"
	git checkout master
}

commit() { # package name
	xgensum -i "$1"
	pkg_install "$1" || exit 1
	xbump "$1"
	git push --set-upstream origin --force "$1"
}

bump() { # package name, new version to update to
	prep_pkgs
	git branch -D "$1"
	git checkout -b "$1"
	git reset --hard upstream/master
	TEMPLATE="srcpkgs/$1/template"
	# update the version
	sed -i "0,/version=[0-9a-z\.]*/s//version=$2/" "$TEMPLATE"
	# reset the revision
	sed -i "0,/revision=[0-9]*/s//revision=1/" "$TEMPLATE"
	commit "$1"
}

pr() { # test state (YES, briefly), pr title (optional)
	[ -z "$1" ] && exit 1
	TITLE=$(git show -s --format=%s)
	[ "$2" ] && TITLE="$2"
	echo "
#### Testing the changes
- I tested the changes in this PR: **$1**

#### Local build testing
- I built this PR locally for my native architecture, x86_64-glibc
" | gh pr create --title "$TITLE" --body-file -
	git checkout master
}

update() {
	sudo xbps-install -Syu
	sudo xbps-remove -O
	sudo rm -rf /var/cache/* /var/tmp/*
	sudo vkpurge rm all
}

check() {
	prep_pkgs
	packages=$(xpkg "$1" | sed '/^.*32bit$/d' | sed '/^.*-devel$/d' | sed '/^lib.*$/d')
	updates=$(echo "$packages" | while read line; do
		./xbps-src update-check $line 2>/dev/null &
	done)
	echo "$updates" | tac | sort -u -t ">" -k1,1
}

reset() {
	OLDBRANCH=$(git rev-parse --abbrev-ref HEAD)
	git checkout master
	git reset --hard
	git branch -D "$OLDBRANCH"
	git push origin -d "$OLDBRANCH"
}

orphan() { # maintainer field of person to orphan
	prep_pkgs
	NAME="$(echo "$1" | cut -d '<' -f 1 | sed 's/ $//')"
	BRANCH="orphan-${NAME/ /-}"
	git checkout -b "$BRANCH"
	grep -Ril "$1" srcpkgs/**/* 2> /dev/null | while read template; do
		sed -i "0,/maintainer=.*/s//maintainer=\"Orphaned <orphan@voidlinux.org>\"/" "$template"
	done
	git commit -am "srcpkgs: orphan $NAME's packages"
	git push --set-upstream origin "$BRANCH"
}

search() {
	 gh search prs --state open --repo void-linux/void-packages --match title "$1"
}

case ${1} in
update) update ;;
check) check "$2" ;;
build) build "$2" "$3" ;;
bump) bump "$2" "$3" ;;
commit) commit "$2" ;;
pr) pr "$2" "$3" ;;
reset) reset ;;
orphan) orphan "$2" ;;
search) search "$2" ;;
esac
