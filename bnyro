#!/bin/bash

MUSICTXTDIR=~/Documents/Linux/music

has() {
	(command -v "$1" &>/dev/null)
}

update() {
	sudo xbps-install -Syu
	sudo xbps-remove -O
	sudo rm -rf /var/cache/* /var/tmp/*
}

minify() { # file path
	if test $# -lt 1; then
		echo Usage $0 CSS-or-JS-file
		exit 1
	fi

	outfile=$(echo $1 | sed -e "s|-raw.\(.*\)$|.\1|")
	if test "$1" = "$outfile"; then
		outfile=/dev/stdout
	else
		echo Minimising $1 and outputting to $outfile
	fi

	cat $1 | sed -e "s|/\*\(\\\\\)\?\*/|/~\1~/|g" -e "s|/\*[^*]*\*\+\([^/][^*]*\*\+\)*/||g" -e "s|\([^:/]\)//.*$|\1|" -e "s|^//.*$||" | tr '\n' ' ' | sed -e "s|/\*[^*]*\*\+\([^/][^*]*\*\+\)*/||g" -e "s|/\~\(\\\\\)\?\~/|/*\1*/|g" -e "s|\s\+| |g" -e "s| \([{;:,]\)|\1|g" -e "s|\([{;:,]\) |\1|g" >$outfile
}

rs() {
	name=$(basename $1 .rs)
	rustc $@ && ./$name && rm $name
}

gitmainbranch() {
	git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
}

gitbranch() {
	git rev-parse --symbolic-full-name --abbrev-ref HEAD
}

gitinit() { # repo location, # initial commit message
	git init
	git branch -M main
	git add .
	git commit -am "${2:-Initial Commit}"
	git remote add origin "git@github.com:$1"
	git push -u origin main
}

gitpush() { # commit message
	git add .
	git commit -am "$1"
	git push origin "$(gitbranch)"
}

gitcheckout() { # name of the new branch
	oldbranch="$(gitbranch)"
	mainbranch="$(gitmainbranch)"
	git checkout "$mainbranch"
	(git fetch upstream && git reset --hard upstream/master || git pull) &> /dev/null
	git checkout -b "$1"
	[ "$2" = "-d" ] && [ "$oldbranch" != "$mainbranch" ] && git branch -d "$oldbranch"
}

gitrefresh() {
	git config pull.rebase true
	git pull
	git push
}

gitsquash() { # the upstream branch to reset to, the commit message
	branch="$(gitbranch)"
	git checkout -b temporary-branch
	git checkout "$branch"
	git reset --hard "$1"
	git merge --squash temporary-branch
	git branch -d temporary-branch
	git commit -am "$2"
	git push -f
}

bundle() {
	bundletool build-apks --bundle=app-release.aab --output=app-release.apks --ks=~/Documents/Linux/keys/you.jks --ks-pass="pass:$ANDROID_KEY_PASS" --ks-key-alias=you --key-pass="pass:$ANDROID_KEY_PASS"
}

bench() { # url to benchmark
	ab -n 20000 -c 1000 "$1"
}

flash() { # sourc file, target drive
	sudo dd if="$1" of="$2" bs=4M status=progress
}

selfinstall() {
	for program in "bnyro bfetch"; do
		sudo cp $program /usr/local/bin
		sudo chmod +x /usr/local/bin/$program
	done
}

case ${1} in
update) update ;;
init) gitinit "$2" "$3" ;;
push) gitpush "$2" ;;
checkout) gitcheckout "$2" "$3" ;;
refresh) gitrefresh ;;
squash) gitsquash  "$2" ;;
minify) minify "$2" ;;
rs) rs "$2" ;;
bundle) bundle ;;
bench) bench "$2" ;;
flash) flash "$2" "$3" ;;
selfinstall) selfinstall ;;
*) update ;;
esac
