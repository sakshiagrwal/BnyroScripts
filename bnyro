#!/bin/bash

KEYSTORE_PATH=~/Documents/Linux/you.jks
OUTPUT_DIR=~/Downloads
PROJECTS_DIR=~/Projects
USER_NAME=Bnyro

has() {
	(command -v "$1" &>/dev/null)
}

update() {
	sudo xbps-install -Syu
	sudo xbps-remove -O
	sudo rm -rf /var/cache/* /var/tmp/*
	sudo vkpurge rm all
}

pkg() { # package/branch name, (optional) github user name of fork, e.g. Bnyro
	cd "$PROJECTS_DIR"
	[ ! -d "void-packages" ] && git clone "git@github.com:$USER_NAME/void-packages"
	cd void-packages
	if [ -z "$2" ]; then
		git remote add "$2" "https://github.com/$2/void-packages.git"
		git fetch "$2"
		git checkout "$2"/"$1"
	else
		git checkout "$1"
	fi
	./xbps-src binary-bootstrap
	./xbps-src clean
	./xbps-src pkg "$1"
	xi "$1"
}

replace() {
	grep -rl "$1" . | xargs sed -i "s/$1/$2/g"
}

minify() { # file path
	if test $# -lt 1; then
		echo Usage $0 CSS-or-JS-file
		exit 1
	fi

	outfile=$(echo $1 | sed -e "s|-raw.\(.*\)$|.\1|")
	if test "$1" = "$outfile"; then
		outfile=/dev/stdout
	else
		echo Minimising $1 and outputting to $outfile
	fi

	cat $1 | sed -e "s|/\*\(\\\\\)\?\*/|/~\1~/|g" -e "s|/\*[^*]*\*\+\([^/][^*]*\*\+\)*/||g" -e "s|\([^:/]\)//.*$|\1|" -e "s|^//.*$||" | tr '\n' ' ' | sed -e "s|/\*[^*]*\*\+\([^/][^*]*\*\+\)*/||g" -e "s|/\~\(\\\\\)\?\~/|/*\1*/|g" -e "s|\s\+| |g" -e "s| \([{;:,]\)|\1|g" -e "s|\([{;:,]\) |\1|g" >$outfile
}

rs() {
	name=$(basename $1 .rs)
	rustc $@ && ./$name && rm $name
}

gitclone() { # repo name
	git clone "git@github.com:$USER_NAME/$1.git"
}

gitmainbranch() {
	git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
}

gitbranch() {
	git rev-parse --symbolic-full-name --abbrev-ref HEAD
}

gitinit() { # repo location, # initial commit message
	git init
	git branch -M main
	git add .
	git commit -am "${2:-Initial Commit}"
	git remote add origin "git@github.com:$1"
	git push -u origin main
}

gitpush() { # commit message
	git add .
	git commit -am "$1"
	git push --set-upstream origin "$(gitbranch)"
}

gitremote() { # remote url, branch
	REMOTE="$(echo $1 | rev | cut -d '/' -f 2 | rev)"
	git remote add "$REMOTE" "$1"
	git fetch "$REMOTE"
	git checkout "$REMOTE/$2"
}

gitrefresh() {
	git config pull.rebase true
	git pull
	git push
}

gitsquash() { # the branch or commit to reset to, the commit message
	git reset --soft "$1"
	git add .
	git commit -am "$2"
}

bundle() {
	./gradlew bundleRelease
	mv app/build/outputs/bundle/release/app-release.aab $OUTPUT_DIR
	cd $OUTPUT_DIR
	bundletool build-apks --bundle=app-release.aab --output=app-release.apks --ks="$KEYSTORE_PATH" --ks-pass="pass:$ANDROID_KEY_PASS" --ks-key-alias=you --key-pass="pass:$ANDROID_KEY_PASS"
}

apk() {
	./gradlew assembleRelease
	mv app/build/outputs/apk/release/app-release-unsigned.apk $OUTPUT_DIR
	cd $OUTPUT_DIR
	jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore "$KEYSTORE_PATH" app-release-unsigned.apk you -storepass "$ANDROID_KEY_PASS"
	ZIPALIGN_PATH=$(find ~/Android/Sdk/build-tools/ | grep zipalign | tail -n 1)
	$ZIPALIGN_PATH -v 4 app-release-unsigned.apk app-release.apk
	rm app-release-unsigned.apk
}

lint_android() {
	ktlint --code-style=android_studio -F
}

bench() { # url to benchmark
	ab -n 20000 -c 1000 "$1"
}

flash() { # sourc file, target drive
	sudo dd if="$1" of="$2" bs=4M status=progress
}

zig() { # Install the latest nightly zig version
	ZIGPATH=/opt/zig
	URL=$(curl -s https://ziglang.org/download/index.json | jq '.master."x86_64-linux".tarball' | sed 's/"//g')
	TARFILE=${URL##*/}
	FOLDER=$(echo "$TARFILE" | sed "s/.tar.xz//")
	wget "$URL"
	tar xvf "$TARFILE"
	rm -rf "$TARFILE"
	sudo rm -rf "$ZIGPATH"
	sudo mv "$FOLDER" "$ZIGPATH"
}

rustinstall() { # git repo url, program name from Cargo.toml
	git clone "$1"
	REPO_NAME=$(basename "$1" .git)
	cd "$REPO_NAME"
	cargo build --release
	sudo mv "target/release/$2" "/usr/local/bin/"
	cd ..
	rm -rf "$REPO_NAME"
}

programs() {
	rustinstall "https://github.com/Bnyro/serve-rs.git" serve
	rustinstall "https://github.com/Bnyro/get-rs.git" get
	rustinstall "https://github.com/Bnyro/rename-rs.git" rn
}

selfinstall() {
	for program in "bnyro bfetch"; do
		sudo cp $program /usr/local/bin
		sudo chmod +x /usr/local/bin/$program
	done
}

case ${1} in
update) update ;;
pkg) pkg "$2" "$3" ;;
replace) replace "$2" "$3" ;;
clone) gitclone "$2" ;;
init) gitinit "$2" "$3" ;;
push) gitpush "$2" ;;
remote) gitremote "$2" "$3" ;;
refresh) gitrefresh ;;
squash) gitsquash  "$2" "$3" ;;
minify) minify "$2" ;;
rs) rs "$2" ;;
bundle) bundle ;;
apk) apk ;;
ktlint) lint_android ;;
bench) bench "$2" ;;
flash) flash "$2" "$3" ;;
zig) zig ;;
programs) programs ;;
selfinstall) selfinstall ;;
*) update ;;
esac
