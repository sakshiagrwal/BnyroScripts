#!/bin/bash

# Needed for RegEx in the extract function
shopt -s extglob

KEYSTORE_PATH=~/Documents/Linux/you.jks
OUTPUT_DIR=~/Downloads

has() {
	(command -v "$1" &>/dev/null)
}

replace() {
	grep -rl "$1" . | xargs sed -i "s/$1/$2/g"
}

minify() { # file path
	if test $# -lt 1; then
		echo Usage $0 CSS-or-JS-file
		exit 1
	fi

	outfile=$(echo $1 | sed -e "s|-raw.\(.*\)$|.\1|")
	if test "$1" = "$outfile"; then
		outfile=/dev/stdout
	else
		echo Minimising $1 and outputting to $outfile
	fi

	cat $1 | sed -e "s|/\*\(\\\\\)\?\*/|/~\1~/|g" -e "s|/\*[^*]*\*\+\([^/][^*]*\*\+\)*/||g" -e "s|\([^:/]\)//.*$|\1|" -e "s|^//.*$||" | tr '\n' ' ' | sed -e "s|/\*[^*]*\*\+\([^/][^*]*\*\+\)*/||g" -e "s|/\~\(\\\\\)\?\~/|/*\1*/|g" -e "s|\s\+| |g" -e "s| \([{;:,]\)|\1|g" -e "s|\([{;:,]\) |\1|g" >$outfile
}

rs() {
	name=$(basename $1 .rs)
	rustc $@ && ./$name && rm $name
}

bundle() {
	./gradlew bundleRelease
	mv app/build/outputs/bundle/release/app-release.aab $OUTPUT_DIR
	cd $OUTPUT_DIR
	bundletool build-apks --bundle=app-release.aab --output=app-release.apks --ks="$KEYSTORE_PATH" --ks-pass="pass:$ANDROID_KEY_PASS" --ks-key-alias=you --key-pass="pass:$ANDROID_KEY_PASS"
}

apk() {
	./gradlew assembleRelease
	mv app/build/outputs/apk/release/app-release-unsigned.apk $OUTPUT_DIR
	cd $OUTPUT_DIR
	jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore "$KEYSTORE_PATH" app-release-unsigned.apk you -storepass "$ANDROID_KEY_PASS"
	ZIPALIGN_PATH=$(find ~/Android/Sdk/build-tools/ | grep zipalign | tail -n 1)
	$ZIPALIGN_PATH -v 4 app-release-unsigned.apk app-release.apk
	rm app-release-unsigned.apk
}

mesonbuild() { # arguments for the build
	meson --prefix="/usr" _build $@
	ninja -C _build
	sudo ninja -C _build install
}

bench() { # url to benchmark
	ab -n 20000 -c 1000 "$1"
}

flash() { # sourc file, target drive
	sudo dd if="$1" of="$2" bs=4M status=progress
}

extract() {
	local c e i

	(($#)) || return

	for i; do
		c=''
		e=1

		if [[ ! -r $i ]]; then
			echo "$0: file is unreadable: \`$i'" >&2
			continue
		fi

		case $i in
		*.t@(gz|lz|xz|b@(2|z?(2))|a@(z|r?(.@(Z|bz?(2)|gz|lzma|xz|zst)))))
			c=(tar xvf)
			;;
		*.7z) c=(7z x) ;;
		*.Z) c=(uncompress) ;;
		*.bz2) c=(bunzip2) ;;
		*.exe) c=(cabextract) ;;
		*.gz) c=(gunzip) ;;
		*.rar) c=(unrar x) ;;
		*.xz) c=(unxz) ;;
		*.zip) c=(unzip) ;;
		*.zst) c=(unzstd) ;;
		*)
			echo "$0: unrecognized file extension: \`$i'" >&2
			continue
			;;
		esac

		command "${c[@]}" "$i"
		((e = e || $?))
	done
	return "$e"
}

zig() { # Install the latest nightly zig version
	ZIGPATH=/opt/zig
	URL=$(curl -s https://ziglang.org/download/index.json | jq '.master."x86_64-linux".tarball' | sed 's/"//g')
	TARFILE=${URL##*/}
	FOLDER=$(echo "$TARFILE" | sed "s/.tar.xz//")
	wget "$URL"
	tar xvf "$TARFILE"
	rm -rf "$TARFILE"
	sudo rm -rf "$ZIGPATH"
	sudo mv "$FOLDER" "$ZIGPATH"
}

rustinstall() { # git repo url, program name from Cargo.toml
	git clone "$1"
	REPO_NAME=$(basename "$1" .git)
	cd "$REPO_NAME"
	cargo build --release
	sudo mv "target/release/$2" "/usr/local/bin/"
	cd ..
	rm -rf "$REPO_NAME"
}

programs() {
	rustinstall "https://github.com/Bnyro/serve-rs.git" serve
	rustinstall "https://github.com/Bnyro/get-rs.git" get
	rustinstall "https://github.com/Bnyro/rename-rs.git" rn
}

selfinstall() {
	for program in "bnyro bfetch pkg gi"; do
		sudo cp $program /usr/local/bin
		sudo chmod +x /usr/local/bin/$program
	done
}

case ${1} in
replace) replace "$2" "$3" ;;
minify) minify "$2" ;;
rs) rs "$2" ;;
bundle) bundle ;;
apk) apk ;;
meson) mesonbuild ${@:2} ;;
bench) bench "$2" ;;
flash) flash "$2" "$3" ;;
extract) extract ${@:2} ;;
zig) zig ;;
programs) programs ;;
selfinstall) selfinstall ;;
esac
